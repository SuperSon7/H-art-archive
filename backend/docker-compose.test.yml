services:
  web:
    build:
      context: .
      dockerfile: docker/web/Dockerfile
    volumes:
      - .:/app
    ports:
      - "${WEB_PORT:-8080}:8080"
    depends_on:
      test_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.test
      - PYTEST_MARKEXPR=${PYTEST_MARKEXPR:-}
      - COVERAGE_FILE=/tmp/.coverage
      - DATABASE_HOST=test_db
      - DATABASE_PORT=5432
    env_file:
      - .env
    command: >
      sh -c '
        python manage.py runserver 0.0.0.0:8080 &
        pytest -q ${PYTEST_MARKEXPR:+-m "$PYTEST_MARKEXPR"}
      '
  test_db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:${DB_PORT:-5432}"
    volumes:
      - test_postgre_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  celery:
    build:
      context: .
      dockerfile: docker/celery/Dockerfile
    command: >
      sh -c '
        celery -A config worker --loglevel=info &
        celery -A config beat --loglevel=info
      '
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
  localstack:
    image: localstack/localstack:3
    ports:
      - "4566:4566"  # gateway
    environment:
      - SERVICES=s3
      - DEBUG=1
    volumes:
      - "./.localstack:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

volumes:
  test_postgre_data:
networks:
  backend-net:
