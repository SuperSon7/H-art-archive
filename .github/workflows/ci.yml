name: CI
on:
  push:
    branches:
      - "master"
      - "features/**"
      - "bugfix/**"
  pull_request:
    branches:
      - "master"
# 폴더에 따라 변경 부분 확인
jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      ai-changed: ${{ steps.changes.outputs.ai }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changed paths
        uses: dorny/paths-filter@v2
        id: changes
        with:
          base: master
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            ai:
              - 'ai/**'
# 백엔드 테스트
  backend-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      #ghcr.io 레지스트리 로그인
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 도커 빌드 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Copy template and override secrets
        run: |
          cp .env.test.template .env
          echo "SECRET_KEY=${{ secrets.TEST_SECRET_KEY }}" >> .env
          echo "DB_PASSWORD=${{ secrets.TEST_DB_PASSWORD }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.TEST_EMAIL_HOST_PASSWORD }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.TEST_EMAIL_HOST_USER }}" >> .env
          echo "DB_HOST=${{ secrets.TEST_DB_HOST }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}" >> .env

      - name: Run Unit Tests (on Push to features/bugfix branches)
        env:
          GITHUB_REPOSITORY_OWNER_LOWER: superson7
          COMPOSE_PROJECT_NAME: h-art-archive
          IMAGE_TAG: ${{ github.sha }}
          PYTEST_MARKEXPR: ${{ github.event_name == 'pull_request' && '' || 'unit and not slow' }}

        run: |
          # -f 옵션으로 사용할 파일을 명시적으로 지정하여 docker-compose를 실행합니다.
          # --build: 이미지를 빌드하며, 이때 docker-compose.ci.yml의 캐시 설정이 자동으로 적용됩니다.
          docker compose \
            -f docker-compose.test.yml \
            -f docker-compose.ci.yml \
            up \
            --build \
            --abort-on-container-exit \
            --exit-code-from web

      - name: Show Postgres logs
        if: always()  # 실패해도 실행
        env:
          GITHUB_REPOSITORY_OWNER_LOWER: superson7
          COMPOSE_PROJECT_NAME: h-art-archive
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker compose \
            -f docker-compose.test.yml \
            -f docker-compose.ci.yml \
            logs --tail=200 test_db


# 프론트엔드 테스트
  frontend-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint

      - name: Run frontend unit tests
        run: |
          cd frontend
          npm run test

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
