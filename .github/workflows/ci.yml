name: CI
on:
  push:
    branches:
      - "master"
      - "features/**"
      - "bugfix/**"
  pull_request:
    branches:
      - "master"
# 폴더에 따라 변경 부분 확인
jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      ai-changed: ${{ steps.changes.outputs.shared }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Detect changed paths
        uses: dorny/paths-filter@v2
        id: changes
        with:
          base: master
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            ai:
              - 'ai/**'
# 백엔드 테스트
  backend-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:15
        env:          
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres 
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:latest
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements/development.txt
          
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/development.txt
      - name: Copy template and override secrets
        run: |
          cp .env.test.template .env.test
          echo "SECRET_KEY=${{ secrets.TEST_SECRET_KEY }}" >> .env.test
          echo "DB_PASSWORD=${{ secrets.TEST_DB_PASSWORD }}" >> .env.test
          echo "EMAIL_HOST_PASSWORD=${{ secrets.TEST_EMAIL_HOST_PASSWORD }}" >> .env.test
          echo "EMAIL_HOST_USER=${{ secrets.TEST_EMAIL_HOST_USER }}" >> .env.test
          echo "DB_HOST=${{ secrets.TEST_DB_HOST }}" >> .env.test
      - name: Run ruff
        run: |
          pip install ruff
          ruff check .
      - name: Run Unit Tests (on Push to features/bugfix branches)
        if: github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/features/') || startsWith(github.ref, 'refs/heads/bugfix/'))
        run: |
          pytest -m unit --tb=short --disable-warnings
      - name: Run ALL Tests (on Pull Request)
        if: github.event_name == 'pull_request'
        run: |
          pytest --tb=short --disable-warnings

# 프론트엔드 테스트
  frontend-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint
          
      - name: Run frontend unit tests
        run: |
          cd frontend
          npm run test
          
      - name: Build frontend
        run: |
          cd frontend
          npm run build
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

